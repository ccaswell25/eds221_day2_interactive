---
title: "EDS221 Day 2 Interactive"
author: "carly"
format: html
editor: visual
execute: 
  warning: false
---

```{r}
library(tidyverse)
```

## Making and Indexing Data in R

### Vectors

Making vectors:

```{r}
dogs <- c("teddy", "khora", "waffle", "banjo", "tallie", "kona")

# Check the class of our vector
typeof(dogs)
class(dogs)
```

```{r}
my_breakfast <- c("waffles", 2, TRUE, "coffee")
typeof(my_breakfast)
class(my_breakfast)
#the entire vector gets stored as a character because it can only have 1 type so it defaults to character
```

```{r}
weights <- c(50, 60, 25, 35, 55)
typeof(weights)
class(weights)

#values are stored as doubles even with whole number values. Doubles are values that can have decimals. 

#to force these to be integer values I would add an "L" to the end of each
weights_integer <- c(50L, 60L, 25L, 35L, 55L)
typeof(weights_integer)
class(weights_integer)
```

We can use the "is." function to test relationships between an object and a class. It is a way to ask R a question about the data. In this case we are asking what class.

```{r}
is.numeric(weights_integer)
```

How do we change the classes of data? We can use the "as." function. In this example, we are changing the zipcodes vector which is initially stored as numeric to character values with as.character

```{r}
zipcodes <- c(93105, 93514, 93101, 93401)
class(zipcodes)
zipcodes_chr <- as.character(zipcodes)
zipcodes_chr
```

### Create a Vector with Named Elements

```{r}
dog_food <- c(teddy = "purina", khora = "alpo", waffle = "fancy feast", banjo = "blue diamond", tallie = "farmer's dog")
class(dog_food)
#We are tacking names on to the values in the vector. The class will always be of the stored values (those that are to the right of the equals sign). In most cases, the data in the vector is not named.
```

```{r}
#How do we ask R the value of a specific position in a vector?
dog_food[2]
#This returns the second position in the vector. In this case it is Khora. 
#R uses a 1-index. The first element is 1.
#NOTE: Python and Javascript use 0 indexing
```

```{r}
#We can return the name of a specific item in the vector, too
dog_food["khora"]
```

Access ranges of values in a vector:

-Use ":" to refer to a range (low: high)

```{r}
trees <- c("ponderosa", "lodgepole", "jeffrey", "sugar", "white", "bristlecone")
trees[3]
trees[3:5]
```

## For Loops!

-Iterative or apply something to values in a vector

```{r}
i <- 4
trees[i]
#This is the same thing as saying return the 4th value in the vector trees
```

```{r}
i <- seq(1:3) # Same thing as writing seq(from = 1, to = 3)
trees[i]
#this is now giving me the values of 1, 2, 3 in the trees vector based on the sequence we created
```

```{r}
#we can reassign values based on the position. in this case we are reassigning the third item in the vector as "oak".
trees[3] <- "Oak"
trees
```

### Branching in Git

-in the terminal, just git branch to see what branch you're working in

-you can click on the branch button in the git tab to create a new branch. This will also create a branch in github.

-ALWAYS CHECK THE BRANCH YOU ARE WORKING IN

-On github, once i push changes to my local branch I need to delete that branch. I can do this using the windows in github. I will also need to delete my local branch (can use terminal commands)

IN TERMINAL

-git checkout "branch name" allows you to switch branches

-git branch will show you what branch you are working in

-git branch -d "branch name" will delete the branch i was working in

-git checkout -b "branch name" creates a new branch

### Matrix Indexing

```{r}
fish_size <- matrix(c(.8, 1.2, .4, .9), ncol = 2, nrow = 2, byrow = FALSE)
fish_size
#checking the class:
class(fish_size)
str(fish_size)
typeof(fish_size)
#indexing our matrix:
fish_size[2,2]
#If I add a comma, it says "keep all rows"
fish_size[,2]
```

### Lists

```{r}
#Let's make a list!We nave named the elements in the list to refer to them later on.
urchins <- list(color = "blue", values = c(1,2,3), meal= c("lunch", "dinner", "dessert"), cost = 5L)
```

```{r}
#How to store the second element of that list in different ways. We can use double brackets to make it a vector and index as a vector or a list
urchins_list <- urchins[2]
urchins_vector <- urchins[[2]]
```

```{r}
urchins$values
```

```{r}
#Let's run a ttest on these 2 vectors
sample1 <- c(1,2,3,4,5,3)
sample2 <- c(3,7,2,6,9,3)

ttest_example <- t.test(sample1, sample2)
ttest_example
#this provides us with the details of the ttest
ttest_example$p.value
#if the null hypothesis is true, there's only a 1.15% chance that 2 random samples would be atleast as different as the sample means we found
```

Mean size for trees in Site A is greater than the mean size in Site B (.......my statistical summary, `r ttest_example$p.value`)

### Data Frames

```{r}
#Let's create a dataframe:
fruit <- data.frame(type = c("apple", "banana", "peach"), mass = c(130, 195, 150))
class(fruit)
fruit

#Let's access items in the dataframe
fruit[3,2] #this is saying find row 3 and column 2 value in fruit
```

The purr package:

```{r}
#This looks at the dataframe,looks in the column called type, and looks for the second element:
purrr::pluck(fruit, "type", 2)
fruit$type[2]
#these return the same ^

#Let's look at the star wars dataset, specifically look at the starships column.  
starwars$starships
#Get a vector of the values of that first row and grab the second value in that vector. We can do that with both options below:
starwars$starships[[1]][2]
purrr::pluck(starwars, "starships", 1, 2)

purrr::pluck(dataframe, column name, position of value)
```
